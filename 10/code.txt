// DemoApplication.java
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}

// config/SwaggerConfig.java
package com.example.demo.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import org.springdoc.core.models.GroupedOpenApi;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class SwaggerConfig {
    @Bean
    public OpenAPI openAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("User Center")
                        .version("1.0.0"));
    }

    @Bean
    public GroupedOpenApi publicApi() {
        return GroupedOpenApi.builder()
                .group("user-center")
                .pathsToMatch("/users/**")
                .build();
    }
}

// controller/UserController.java
package com.example.demo.controller;

import com.example.demo.domain.dto.CreateUserDTO;
import com.example.demo.domain.dto.UserVO;
import com.example.demo.service.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.web.bind.annotation.*;

@Tag(name = "用户管理")
@RestController
@RequestMapping("/users")
public class UserController {
    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @Operation(summary = "创建用户")
    @PostMapping
    public R<UserVO> createUser(@RequestBody @Valid CreateUserDTO createUserDTO) {
        return R.success(userService.createUser(createUserDTO));
    }

    @Operation(summary = "根据ID查询用户")
    @GetMapping("/{id}")
    public R<UserVO> getUserById(
            @Parameter(description = "用户ID") @PathVariable Long id) {
        return R.success(userService.getUserById(id));
    }
}

// domain/dto/CreateUserDTO.java
package com.example.demo.domain.dto;

import jakarta.validation.constraints.*;

public record CreateUserDTO(
        @NotBlank
        @Size(min = 3, max = 20)
        String username,

        @NotBlank
        @Email
        String email,

        @NotNull
        @Min(1)
        @Max(120)
        Integer age
) {}

// domain/dto/UserVO.java
package com.example.demo.domain.dto;

import java.time.Instant;

public record UserVO(
        Long id,
        String username,
        String email,
        Integer age,
        Instant createdAt
) {}

// domain/entity/User.java
package com.example.demo.domain.entity;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

import java.time.Instant;

@Getter
@Setter
@Entity
@Table(name = "users")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, length = 20)
    private String username;

    @Column(nullable = false)
    private String email;

    @Column(nullable = false)
    private Integer age;

    @Column(nullable = false, updatable = false)
    private Instant createdAt;

    @PrePersist
    protected void onCreate() {
        this.createdAt = Instant.now();
    }
}

// exception/BusinessException.java
package com.example.demo.exception;

import lombok.Getter;

@Getter
public class BusinessException extends RuntimeException {
    private final int code;

    public BusinessException(int code, String message) {
        super(message);
        this.code = code;
    }
}

// exception/GlobalExceptionHandler.java
package com.example.demo.exception;

import org.springframework.http.HttpStatus;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import java.util.List;
import java.util.stream.Collectors;

@RestControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(MethodArgumentNotValidException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public R<Void> handleValidationExceptions(MethodArgumentNotValidException ex) {
        List<String> errors = ex.getBindingResult()
                .getFieldErrors()
                .stream()
                .map(this::formatErrorMessage)
                .collect(Collectors.toList());
        return R.error(400, String.join("; ", errors));
    }

    private String formatErrorMessage(FieldError error) {
        return error.getField() + ": " + error.getDefaultMessage();
    }

    @ExceptionHandler(BusinessException.class)
    public R<Void> handleBusinessException(BusinessException ex) {
        return R.error(ex.getCode(), ex.getMessage());
    }

    @ExceptionHandler(Exception.class)
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    public R<Void> handleGlobalException(Exception ex) {
        return R.error(500, "系统内部错误");
    }
}

// repository/UserRepository.java
package com.example.demo.repository;

import com.example.demo.domain.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<User, Long> {
}

// service/UserService.java
package com.example.demo.service;

import com.example.demo.domain.dto.CreateUserDTO;
import com.example.demo.domain.dto.UserVO;

public interface UserService {
    UserVO createUser(CreateUserDTO createUserDTO);
    UserVO getUserById(Long id);
}

// service/impl/UserServiceImpl.java
package com.example.demo.service.impl;

import com.example.demo.domain.dto.CreateUserDTO;
import com.example.demo.domain.dto.UserVO;
import com.example.demo.domain.entity.User;
import com.example.demo.exception.BusinessException;
import com.example.demo.repository.UserRepository;
import com.example.demo.service.UserService;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

@Service
public class UserServiceImpl implements UserService {
    private final UserRepository userRepository;

    public UserServiceImpl(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @Override
    @Transactional
    public UserVO createUser(CreateUserDTO createUserDTO) {
        // 检查邮箱是否已存在
        if (userRepository.existsByEmail(createUserDTO.email())) {
            throw new BusinessException(400, "邮箱已存在");
        }

        User user = new User();
        user.setUsername(createUserDTO.username());
        user.setEmail(createUserDTO.email());
        user.setAge(createUserDTO.age());

        User savedUser = userRepository.save(user);
        return toUserVO(savedUser);
    }

    @Override
    public UserVO getUserById(Long id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new BusinessException(404, "用户不存在"));
        return toUserVO(user);
    }

    private UserVO toUserVO(User user) {
        return new UserVO(
                user.getId(),
                user.getUsername(),
                user.getEmail(),
                user.getAge(),
                user.getCreatedAt()
        );
    }
}

// util/R.java
package com.example.demo.util;

import lombok.Getter;

@Getter
public class R<T> {
    private final int code;
    private final String msg;
    private final T data;

    private R(int code, String msg, T data) {
        this.code = code;
        this.msg = msg;
        this.data = data;
    }

    public static <T> R<T> success(T data) {
        return new R<>(200, "成功", data);
    }

    public static <T> R<T> error(int code, String msg) {
        return new R<>(code, msg, null);
    }
}

# application.yml
spring:
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password:
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        format_sql: true
    database-platform: org.hibernate.dialect.H2Dialect

springdoc:
  swagger-ui:
    path: /swagger-ui.html
    enabled: true