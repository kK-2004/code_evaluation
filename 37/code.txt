import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Base64;

public class PwdEncoder {
    // 加盐长度
    private static final int SALT_LENGTH = 16;
    
    /**
     * 生成随机盐值
     * @return 随机盐值(Base64编码)
     */
    private static String generateSalt() {
        SecureRandom random = new SecureRandom();
        byte[] salt = new byte[SALT_LENGTH];
        random.nextBytes(salt);
        return Base64.getEncoder().encodeToString(salt);
    }
    
    /**
     * 使用SHA-256加盐加密密码
     * @param password 明文密码
     * @param salt 盐值(Base64编码)
     * @return 加密后的密码(Base64编码)
     */
    private static String sha256WithSalt(String password, String salt) {
        try {
            // 将盐值解码为字节数组
            byte[] saltBytes = Base64.getDecoder().decode(salt);
            
            // 创建MessageDigest实例
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            
            // 先更新盐值
            md.update(saltBytes);
            
            // 再更新密码
            md.update(password.getBytes(StandardCharsets.UTF_8));
            
            // 获取加密结果
            byte[] digest = md.digest();
            
            // 返回Base64编码的结果
            return Base64.getEncoder().encodeToString(digest);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("SHA-256算法不可用", e);
        }
    }
    
    /**
     * 加密密码并返回带盐的加密结果(格式: salt$encryptedPassword)
     * @param password 明文密码
     * @return 带盐的加密密码(盐值和加密密码用$分隔)
     */
    public static String encode(String password) {
        // 生成随机盐值
        String salt = generateSalt();
        
        // 加盐加密密码
        String encryptedPassword = sha256WithSalt(password, salt);
        
        // 返回盐值和加密密码的组合(用$分隔)
        return salt + "$" + encryptedPassword;
    }
    
    /**
     * 验证密码是否匹配
     * @param rawPassword 明文密码
     * @param encodedPassword 存储的带盐加密密码(格式: salt$encryptedPassword)
     * @return 是否匹配
     */
    public static boolean matches(String rawPassword, String encodedPassword) {
        if (encodedPassword == null || encodedPassword.isEmpty() || !encodedPassword.contains("$")) {
            return false;
        }
        
        // 分割盐值和加密密码
        String[] parts = encodedPassword.split("\\$");
        if (parts.length != 2) {
            return false;
        }
        
        String salt = parts[0];
        String storedEncryptedPassword = parts[1];
        
        // 使用相同的盐值加密输入密码
        String encryptedInputPassword = sha256WithSalt(rawPassword, salt);
        
        // 比较加密结果
        return storedEncryptedPassword.equals(encryptedInputPassword);
    }
    
    public static void main(String[] args) {
        // 示例使用
        String password = "123456";
        
        // 加密密码
        String encodedPassword = encode(password);
        System.out.println("加密后的密码(含盐): " + encodedPassword);
        
        // 验证密码
        boolean match1 = matches("123456", encodedPassword);
        System.out.println("验证正确密码: " + match1); // 应该输出true
        
        boolean match2 = matches("wrongpassword", encodedPassword);
        System.out.println("验证错误密码: " + match2); // 应该输出false
    }
}