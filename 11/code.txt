# src/main/resources/application.yml
spring:
  application:
    name: ecommerce-demo
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password:
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        format_sql: true
  h2:
    console:
      enabled: true
      path: /h2-console
  thymeleaf:
    cache: false
  devtools:
    livereload:
      enabled: true

server:
  port: 8080

// src/main/java/com/example/demo/domain/entity/Product.java
package com.example.demo.domain.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import lombok.Data;
import java.math.BigDecimal;

@Data
@Entity
@Table(name = "products")
public class Product {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank
    @Size(max = 100)
    private String name;

    @Column(length = 1000)
    private String description;

    @DecimalMin("0.01")
    private BigDecimal price;

    private String imageUrl;

    @Min(0)
    private Integer stock;

    private String category;
}

// src/main/java/com/example/demo/domain/entity/CartItem.java
package com.example.demo.domain.entity;

import jakarta.persistence.*;
import lombok.Data;

@Data
@Entity
@Table(name = "cart_items")
public class CartItem {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "product_id")
    private Product product;

    private Integer quantity;

    @Column(nullable = false)
    private String sessionId;
}

// src/main/java/com/example/demo/domain/dto/ProductSearchDTO.java
package com.example.demo.domain.dto;

import lombok.Data;
import java.math.BigDecimal;

@Data
public class ProductSearchDTO {
    private String keyword;
    private BigDecimal minPrice;
    private BigDecimal maxPrice;
    private String category;
    private int page = 1;
    private int size = 9;
}

// src/main/java/com/example/demo/domain/dto/R.java
package com.example.demo.domain.dto;

import lombok.Data;

@Data
public class R<T> {
    private int code;
    private String msg;
    private T data;

    public static <T> R<T> success(T data) {
        R<T> r = new R<>();
        r.setCode(200);
        r.setMsg("success");
        r.setData(data);
        return r;
    }

    public static <T> R<T> error(String msg) {
        R<T> r = new R<>();
        r.setCode(500);
        r.setMsg(msg);
        return r;
    }
}

// src/main/java/com/example/demo/repository/ProductRepository.java
package com.example.demo.repository;

import com.example.demo.domain.entity.Product;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.math.BigDecimal;

public interface ProductRepository extends JpaRepository<Product, Long> {
    
    @Query("SELECT p FROM Product p WHERE " +
           "(:keyword IS NULL OR LOWER(p.name) LIKE LOWER(CONCAT('%', :keyword, '%')) OR LOWER(p.description) LIKE LOWER(CONCAT('%', :keyword, '%'))) " +
           "AND (:minPrice IS NULL OR p.price >= :minPrice) " +
           "AND (:maxPrice IS NULL OR p.price <= :maxPrice) " +
           "AND (:category IS NULL OR p.category = :category)")
    Page<Product> searchProducts(
            @Param("keyword") String keyword,
            @Param("minPrice") BigDecimal minPrice,
            @Param("maxPrice") BigDecimal maxPrice,
            @Param("category") String category,
            Pageable pageable);
}

// src/main/java/com/example/demo/repository/CartItemRepository.java
package com.example.demo.repository;

import com.example.demo.domain.entity.CartItem;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface CartItemRepository extends JpaRepository<CartItem, Long> {
    List<CartItem> findBySessionId(String sessionId);
    void deleteBySessionId(String sessionId);
}

// src/main/java/com/example/demo/service/ProductService.java
package com.example.demo.service;

import com.example.demo.domain.dto.ProductSearchDTO;
import com.example.demo.domain.entity.Product;
import org.springframework.data.domain.Page;

public interface ProductService {
    Page<Product> searchProducts(ProductSearchDTO searchDTO);
    Product getProductById(Long id);
}

// src/main/java/com/example/demo/service/impl/ProductServiceImpl.java
package com.example.demo.service.impl;

import com.example.demo.domain.dto.ProductSearchDTO;
import com.example.demo.domain.entity.Product;
import com.example.demo.repository.ProductRepository;
import com.example.demo.service.ProductService;
import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class ProductServiceImpl implements ProductService {
    private final ProductRepository productRepository;

    @Override
    public Page<Product> searchProducts(ProductSearchDTO searchDTO) {
        return productRepository.searchProducts(
                searchDTO.getKeyword(),
                searchDTO.getMinPrice(),
                searchDTO.getMaxPrice(),
                searchDTO.getCategory(),
                PageRequest.of(searchDTO.getPage() - 1, searchDTO.getSize())
        );
    }

    @Override
    public Product getProductById(Long id) {
        return productRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Product not found with id: " + id));
    }
}

// src/main/java/com/example/demo/service/CartService.java
package com.example.demo.service;

import com.example.demo.domain.entity.CartItem;

import java.util.List;

public interface CartService {
    List<CartItem> getCartItems(String sessionId);
    void addToCart(String sessionId, Long productId, int quantity);
    void updateCartItemQuantity(String sessionId, Long itemId, int quantity);
    void removeFromCart(String sessionId, Long itemId);
    void clearCart(String sessionId);
}

// src/main/java/com/example/demo/service/impl/CartServiceImpl.java
package com.example.demo.service.impl;

import com.example.demo.domain.entity.CartItem;
import com.example.demo.domain.entity.Product;
import com.example.demo.repository.CartItemRepository;
import com.example.demo.repository.ProductRepository;
import com.example.demo.service.CartService;
import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@RequiredArgsConstructor
public class CartServiceImpl implements CartService {
    private final CartItemRepository cartItemRepository;
    private final ProductRepository productRepository;

    @Override
    public List<CartItem> getCartItems(String sessionId) {
        return cartItemRepository.findBySessionId(sessionId);
    }

    @Override
    @Transactional
    public void addToCart(String sessionId, Long productId, int quantity) {
        Product product = productRepository.findById(productId)
                .orElseThrow(() -> new EntityNotFoundException("Product not found"));

        CartItem cartItem = cartItemRepository.findBySessionIdAndProductId(sessionId, productId)
                .orElseGet(() -> {
                    CartItem newItem = new CartItem();
                    newItem.setSessionId(sessionId);
                    newItem.setProduct(product);
                    return newItem;
                });

        cartItem.setQuantity(cartItem.getQuantity() + quantity);
        cartItemRepository.save(cartItem);
    }

    @Override
    @Transactional
    public void updateCartItemQuantity(String sessionId, Long itemId, int quantity) {
        CartItem cartItem = cartItemRepository.findById(itemId)
                .orElseThrow(() -> new EntityNotFoundException("Cart item not found"));

        if (!cartItem.getSessionId().equals(sessionId)) {
            throw new SecurityException("Invalid session");
        }

        if (quantity <= 0) {
            cartItemRepository.delete(cartItem);
        } else {
            cartItem.setQuantity(quantity);
            cartItemRepository.save(cartItem);
        }
    }

    @Override
    public void removeFromCart(String sessionId, Long itemId) {
        CartItem cartItem = cartItemRepository.findById(itemId)
                .orElseThrow(() -> new EntityNotFoundException("Cart item not found"));

        if (!cartItem.getSessionId().equals(sessionId)) {
            throw new SecurityException("Invalid session");
        }

        cartItemRepository.delete(cartItem);
    }

    @Override
    public void clearCart(String sessionId) {
        cartItemRepository.deleteBySessionId(sessionId);
    }
}

// src/main/java/com/example/demo/service/impl/CartServiceImpl.java
package com.example.demo.service.impl;

import com.example.demo.domain.entity.CartItem;
import com.example.demo.domain.entity.Product;
import com.example.demo.repository.CartItemRepository;
import com.example.demo.repository.ProductRepository;
import com.example.demo.service.CartService;
import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@RequiredArgsConstructor
public class CartServiceImpl implements CartService {
    private final CartItemRepository cartItemRepository;
    private final ProductRepository productRepository;

    @Override
    public List<CartItem> getCartItems(String sessionId) {
        return cartItemRepository.findBySessionId(sessionId);
    }

    @Override
    @Transactional
    public void addToCart(String sessionId, Long productId, int quantity) {
        Product product = productRepository.findById(productId)
                .orElseThrow(() -> new EntityNotFoundException("Product not found"));

        CartItem cartItem = cartItemRepository.findBySessionIdAndProductId(sessionId, productId)
                .orElseGet(() -> {
                    CartItem newItem = new CartItem();
                    newItem.setSessionId(sessionId);
                    newItem.setProduct(product);
                    return newItem;
                });

        cartItem.setQuantity(cartItem.getQuantity() + quantity);
        cartItemRepository.save(cartItem);
    }

    @Override
    @Transactional
    public void updateCartItemQuantity(String sessionId, Long itemId, int quantity) {
        CartItem cartItem = cartItemRepository.findById(itemId)
                .orElseThrow(() -> new EntityNotFoundException("Cart item not found"));

        if (!cartItem.getSessionId().equals(sessionId)) {
            throw new SecurityException("Invalid session");
        }

        if (quantity <= 0) {
            cartItemRepository.delete(cartItem);
        } else {
            cartItem.setQuantity(quantity);
            cartItemRepository.save(cartItem);
        }
    }

    @Override
    public void removeFromCart(String sessionId, Long itemId) {
        CartItem cartItem = cartItemRepository.findById(itemId)
                .orElseThrow(() -> new EntityNotFoundException("Cart item not found"));

        if (!cartItem.getSessionId().equals(sessionId)) {
            throw new SecurityException("Invalid session");
        }

        cartItemRepository.delete(cartItem);
    }

    @Override
    public void clearCart(String sessionId) {
        cartItemRepository.deleteBySessionId(sessionId);
    }
}

// src/main/java/com/example/demo/controller/ProductController.java
package com.example.demo.controller;

import com.example.demo.domain.dto.ProductSearchDTO;
import com.example.demo.service.ProductService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
@RequestMapping("/products")
@RequiredArgsConstructor
public class ProductController {
    private final ProductService productService;

    @GetMapping
    public String listProducts(ProductSearchDTO searchDTO, Model model) {
        model.addAttribute("searchDTO", searchDTO);
        model.addAttribute("products", productService.searchProducts(searchDTO));
        return "product/list";
    }

    @GetMapping("/{id}")
    public String productDetail(@PathVariable Long id, Model model) {
        model.addAttribute("product", productService.getProductById(id));
        return "product/detail";
    }
}

// src/main/java/com/example/demo/controller/CartController.java
package com.example.demo.controller;

import com.example.demo.service.CartService;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

@Controller
@RequestMapping("/cart")
@RequiredArgsConstructor
public class CartController {
    private final CartService cartService;

    @GetMapping
    public String viewCart(HttpServletRequest request, Model model) {
        String sessionId = request.getSession().getId();
        model.addAttribute("cartItems", cartService.getCartItems(sessionId));
        return "cart/view";
    }

    @PostMapping("/add")
    @ResponseBody
    public String addToCart(@RequestParam Long productId, 
                           @RequestParam(defaultValue = "1") int quantity,
                           HttpServletRequest request) {
        String sessionId = request.getSession().getId();
        cartService.addToCart(sessionId, productId, quantity);
        return "success";
    }

    @PostMapping("/update")
    @ResponseBody
    public String updateCartItem(@RequestParam Long itemId,
                                @RequestParam int quantity,
                                HttpServletRequest request) {
        String sessionId = request.getSession().getId();
        cartService.updateCartItemQuantity(sessionId, itemId, quantity);
        return "success";
    }

    @PostMapping("/remove")
    @ResponseBody
    public String removeFromCart(@RequestParam Long itemId,
                                HttpServletRequest request) {
        String sessionId = request.getSession().getId();
        cartService.removeFromCart(sessionId, itemId);
        return "success";
    }

    @PostMapping("/clear")
    @ResponseBody
    public String clearCart(HttpServletRequest request) {
        String sessionId = request.getSession().getId();
        cartService.clearCart(sessionId);
        return "success";
    }
}

// src/main/java/com/example/demo/config/GlobalExceptionHandler.java
package com.example.demo.config;

import com.example.demo.domain.dto.R;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.validation.BindException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(BindException.class)
    @ResponseBody
    public R<Object> handleBindException(BindException e) {
        return R.error("Validation failed: " + e.getAllErrors().get(0).getDefaultMessage());
    }

    @ExceptionHandler(EntityNotFoundException.class)
    public ModelAndView handleEntityNotFoundException(EntityNotFoundException e) {
        ModelAndView mav = new ModelAndView("error");
        mav.addObject("errorMessage", e.getMessage());
        return mav;
    }

    @ExceptionHandler(Exception.class)
    public ModelAndView handleException(Exception e) {
        ModelAndView mav = new ModelAndView("error");
        mav.addObject("errorMessage", "An error occurred: " + e.getMessage());
        return mav;
    }
}

<!-- src/main/resources/templates/product/list.html -->
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product List</title>
    <link rel="stylesheet" th:href="@{/css/style.css}">
</head>
<body>
    <div class="container">
        <h1>Product List</h1>
        
        <form th:action="@{/products}" method="get" class="search-form">
            <input type="text" name="keyword" th:value="${searchDTO.keyword}" placeholder="Search products...">
            <div class="price-filter">
                <label>Price:</label>
                <input type="number" name="minPrice" th:value="${searchDTO.minPrice}" placeholder="Min">
                <span>-</span>
                <input type="number" name="maxPrice" th:value="${searchDTO.maxPrice}" placeholder="Max">
            </div>
            <button type="submit">Search</button>
        </form>

        <div class="product-grid">
            <div th:each="product : ${products.content}" class="product-card">
                <img th:src="${product.imageUrl}" alt="${product.name}">
                <h3 th:text="${product.name}"></h3>
                <p th:text="'¥' + ${#numbers.formatDecimal(product.price, 1, 2)}"></p>
                <a th:href="@{/products/{id}(id=${product.id})}" class="btn">View Details</a>
            </div>
        </div>

        <nav class="pagination">
            <ul>
                <li th:if="${products.number} > 0">
                    <a th:href="@{/products(page=${products.number}, keyword=${searchDTO.keyword}, minPrice=${searchDTO.minPrice}, maxPrice=${searchDTO.maxPrice})}">Previous</a>
                </li>
                <li th:each="i : ${#numbers.sequence(1, products.totalPages)}">
                    <a th:href="@{/products(page=${i}, keyword=${searchDTO.keyword}, minPrice=${searchDTO.minPrice}, maxPrice=${searchDTO.maxPrice})}" 
                       th:classappend="${i == products.number + 1} ? 'active'">
                        <span th:text="${i}"></span>
                    </a>
                </li>
                <li th:if="${products.number} < ${products.totalPages - 1}">
                    <a th:href="@{/products(page=${products.number + 2}, keyword=${searchDTO

<!-- src/main/resources/templates/product/detail.html -->
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title th:text="${product.name}"></title>
    <link rel="stylesheet" th:href="@{/css/style.css}">
</head>
<body>
    <div class="container">
        <div class="product-detail">
            <div class="product-gallery">
                <img th:src="${product.imageUrl}" alt="${product.name}" class="main-image">
                <div class="thumbnail-container">
                    <!-- 假设有多张图片，实际应根据产品图片列表实现 -->
                    <img th:src="${product.imageUrl}" alt="${product.name}" class="thumbnail active">
                </div>
            </div>
            
            <div class="product-info">
                <h1 th:text="${product.name}"></h1>
                <p class="price" th:text="'¥' + ${#numbers.formatDecimal(product.price, 1, 2)}"></p>
                <p class="stock" th:text="'Stock: ' + ${product.stock}"></p>
                
                <div class="product-description">
                    <h3>Description</h3>
                    <p th:text="${product.description}"></p>
                </div>
                
                <div class="product-actions">
                    <div class="quantity-selector">
                        <button class="decrement">-</button>
                        <input type="number" value="1" min="1" max="99">
                        <button class="increment">+</button>
                    </div>
                    <button class="btn add-to-cart" data-product-id="${product.id}">Add to Cart</button>
                </div>
            </div>
        </div>
    </div>

    <script th:src="@{/js/product-detail.js}"></script>
</body>
</html>

<!-- src/main/resources/templates/cart/view.html -->
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <link rel="stylesheet" th:href="@{/css/style.css}">
</head>
<body>
    <div class="container">
        <h1>Your Shopping Cart</h1>
        
        <div th:if="${#lists.isEmpty(cartItems)}" class="empty-cart">
            <p>Your cart is empty</p>
            <a th:href="@{/products}" class="btn">Continue Shopping</a>
        </div>
        
        <div th:unless="${#lists.isEmpty(cartItems)}">
            <div class="cart-items">
                <div th:each="item : ${cartItems}" class="cart-item">
                    <img th:src="${item.product.imageUrl}" alt="${item.product.name}" class="product-image">
                    <div class="item-details">
                        <h3 th:text="${item.product.name}"></h3>
                        <p th:text="'¥' + ${#numbers.formatDecimal(item.product.price, 1, 2)}"></p>
                    </div>
                    <div class="item-quantity">
                        <button class="decrement" data-item-id="${item.id}">-</button>
                        <input type="number" th:value="${item.quantity}" min="1" max="99" data-item-id="${item.id}">
                        <button class="increment" data-item-id="${item.id}">+</button>
                    </div>
                    <div class="item-total" th:text="'¥' + ${#numbers.formatDecimal(item.product.price * item.quantity, 1, 2)}"></div>
                    <button class="remove-item" data-item-id="${item.id}">×</button>
                </div>
            </div>
            
            <div class="cart-summary">
                <div class="total">
                    <span>Total:</span>
                    <span th:text="'¥' + ${#numbers.formatDecimal(
                        #aggregates.sum(#lists.map(cartItems, item -> item.product.price * item.quantity)), 1, 2)}">
                    </span>
                </div>
                <button class="btn checkout-btn">Proceed to Checkout</button>
                <button class="btn clear-cart-btn">Clear Cart</button>
            </div>
        </div>
    </div>

    <script th:src="@{/js/cart.js}"></script>
</body>
</html>

<!-- src/main/resources/templates/error.html -->
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Error</title>
    <link rel="stylesheet" th:href="@{/css/style.css}">
</head>
<body>
    <div class="container">
        <h1>Error</h1>
        <p th:text="${errorMessage ?: 'An unexpected error occurred'}"></p>
        <a th:href="@{/products}" class="btn">Back to Home</a>
    </div>
</body>
</html>

/* src/main/resources/static/css/style.css */
:root {
    --primary-color: #4285f4;
    --secondary-color: #34a853;
    --danger-color: #ea4335;
    --text-color: #333;
    --light-gray: #f5f5f5;
    --border-color: #ddd;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    color: var(--text-color);
    background-color: #fff;
}

.container {
    width: 90%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px 0;
}

.btn {
    display: inline-block;
    padding: 10px 20px;
    background-color: var(--primary-color);
    color: white;
    text-decoration: none;
    border-radius: 4px;
    border: none;
    cursor: pointer;
    transition: background-color 0.3s;
}

.btn:hover {
    background-color: #3367d6;
}

.btn.secondary {
    background-color: var(--secondary-color);
}

.btn.secondary:hover {
    background-color: #2d924a;
}

.btn.danger {
    background-color: var(--danger-color);
}

.btn.danger:hover {
    background-color: #d33426;
}

/* Search Form */
.search-form {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
    padding: 15px;
    background-color: var(--light-gray);
    border-radius: 4px;
}

.search-form input[type="text"],
.search-form input[type="number"] {
    padding: 8px 12px;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    flex: 1;
}

.search-form button {
    padding: 8px 16px;
}

.price-filter {
    display: flex;
    align-items: center;
    gap: 5px;
}

/* Product Grid */
.product-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.product-card {
    border: 1px solid var(--border-color);
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.3s, box-shadow 0.3s;
}

.product-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
}

.product-card img {
    width: 100%;
    height: 200px;
    object-fit: cover;
}

.product-card h3 {
    padding: 10px 15px 0;
    font-size: 1.1rem;
}

.product-card p {
    padding: 0 15px 10px;
    color: var(--primary-color);
    font-weight: bold;
}

.product-card .btn {
    display: block;
    width: calc(100% - 30px);
    margin: 0 auto 15px;
    text-align: center;
}

/* Pagination */
.pagination ul {
    display: flex;
    justify-content: center;
    list-style: none;
    gap: 5px;
}

.pagination a {
    display: block;
    padding: 8px 12px;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    text-decoration: none;
    color: var(--text-color);
}

.pagination a.active {
    background-color: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
}

/* Product Detail */
.product-detail {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
    margin-top: 20px;
}

.product-gallery .main-image {
    width: 100%;
    height: 400px;
    object-fit: cover;
    border-radius: 8px;
}

.thumbnail-container {
    display: flex;
    gap: 10px;
    margin-top: 10px;
}

.thumbnail {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 4px;
    cursor: pointer;
    border: 2px solid transparent;
}

.thumbnail.active {
    border-color: var(--primary-color);
}

.product-info h1 {
    margin-bottom: 15px;
}

.price {
    font-size: 1.8rem;
    color: var(--primary-color);
    margin-bottom: 15px;
}

.stock {
    color: #666;
    margin-bottom: 20px;
}

.product-description {
    margin: 25px 0;
    padding: 15px 0;
    border-top: 1px solid var(--border-color);
    border-bottom: 1px solid var(--border-color);
}

.product-description h3 {
    margin-bottom: 10px;
}

.quantity-selector {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
}

.quantity-selector button {
    width: 30px;
    height: 30px;
    background-color: var(--light-gray);
    border: 1px solid var(--border-color);
    cursor: pointer;
    font-size: 1rem;
}

.quantity-selector input {
    width: 50px;
    height: 30px;
    text-align: center;
    border: 1px solid var(--border-color);
    margin: 0 5px;
}

/* Cart Page */
.cart-items {
    margin-bottom: 30px;
}

.cart-item {
    display: flex;
    align-items: center;
    padding: 15px;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    margin-bottom: 10px;
}

.cart-item .product-image {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 4px;
    margin-right: 15px;
}

.item-details {
    flex: 2;
}

.item-details h3 {
    margin-bottom: 5px;
}

.item-quantity {
    display: flex;
    align-items: center;
    margin: 0 20px;
}

.item-quantity button {
    width: 25px;
    height: 25px;
    background-color: var(--light-gray);
    border: 1px solid var(--border-color);
    cursor: pointer;
}

.item-quantity input {
    width: 40px;
    height: 25px;
    text-align: center;
    border: 1px solid var(--border-color);
    margin: 0 5px;
}

.item-total {
    flex: 1;
    text-align: right;
    font-weight: bold;
    color: var(--primary-color);
}

.remove-item {
    margin-left: 20px;
    background: none;
    border: none;
    font-size: 1.5rem;
    color: #999;
    cursor: pointer;
}

.remove-item:hover {
    color: var(--danger-color);
}

.cart-summary {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    padding: 20px;
    background-color: var(--light-gray);
    border-radius: 4px;
}

.total {
    font-size: 1.2rem;
    font-weight: bold;
    margin-right: 20px;
}

.total span:last-child {
    color: var(--primary-color);
    margin-left: 10px;
}

.checkout-btn {
    margin-left: 15px;
}

/* Empty Cart */
.empty-cart {
    text-align: center;
    padding: 50px 0;
}

.empty-cart p {
    font-size: 1.2rem;
    margin-bottom: 20px;
    color: #666;
}

/* Responsive Design */
@media (max-width: 768px) {
    .product-detail {
        grid-template-columns: 1fr;
    }
    
    .product-gallery .main-image {
        height: 300px;
    }
    
    .cart-item {
        flex-wrap: wrap;
    }
    
    .item-quantity {
        margin: 10px 0;
    }
    
    .item-total {
        flex: auto;
        text-align: left;
        margin-top: 10px;
    }
    
    .remove-item {
        margin-left: auto;
    }
}

// src/main/resources/static/js/product-detail.js
document.addEventListener('DOMContentLoaded', function() {
    // Thumbnail selection
    const thumbnails = document.querySelectorAll('.thumbnail');
    const mainImage = document.querySelector('.main-image');
    
    thumbnails.forEach(thumbnail => {
        thumbnail.addEventListener('click', function() {
            // Remove active class from all thumbnails
            thumbnails.forEach(thumb => thumb.classList.remove('active'));
            
            // Add active class to clicked thumbnail
            this.classList.add('active');
            
            // Change main image src
            mainImage.src = this.src;
        });
    });
    
    // Quantity selector
    const decrementBtn = document.querySelector('.decrement');
    const incrementBtn = document.querySelector('.increment');
    const quantityInput = document.querySelector('.quantity-selector input');
    
    decrementBtn.addEventListener('click', function() {
        let value = parseInt(quantityInput.value);
        if (value > 1) {
            quantityInput.value = value - 1;
        }
    });
    
    incrementBtn.addEventListener('click', function() {
        let value = parseInt(quantityInput.value);
        quantityInput.value = value + 1;
    });
    
    // Add to cart
    const addToCartBtn = document.querySelector('.add-to-cart');
    const productId = addToCartBtn.getAttribute('data-product-id');
    
    addToCartBtn.addEventListener('click', function() {
        const quantity = parseInt(quantityInput.value);
        
        fetch('/cart/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `productId=${productId}&quantity=${quantity}`
        })
        .then(response => response.text())
        .then(data => {
            if (data === 'success') {
                alert('Product added to cart!');
            }
        })
        .catch(error => console.error('Error:', error));
    });
});

// src/main/resources/static/js/cart.js
document.addEventListener('DOMContentLoaded', function() {
    // Quantity change handlers
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('decrement') || e.target.classList.contains('increment')) {
            const itemId = e.target.getAttribute('data-item-id');
            const input = document.querySelector(`input[data-item-id="${itemId}"]`);
            let quantity = parseInt(input.value);
            
            if (e.target.classList.contains('decrement') && quantity > 1) {
                quantity--;
            } else if (e.target.classList.contains('increment')) {
                quantity++;
            }
            
            input.value = quantity;
            updateCartItem(itemId, quantity);
        }
        
        if (e.target.classList.contains('remove-item')) {
            const itemId = e.target.getAttribute('data-item-id');
            if (confirm('Are you sure you want to remove this item?')) {
                removeFromCart(itemId);
            }
        }
    });
    
    // Input change handler
    document.addEventListener('change', function(e) {
        if (e.target.hasAttribute('data-item-id')) {
            const itemId = e.target.getAttribute('data-item-id');
            const quantity = parseInt(e.target.value);
            if (quantity >= 1) {
                updateCartItem(itemId, quantity);
            }
        }
    });
    
    // Clear cart
    const clearCartBtn = document.querySelector('.clear-cart-btn');
    if (clearCartBtn) {
        clearCartBtn.addEventListener('click', function() {
            if (confirm('Are you sure you want to clear your cart?')) {
                fetch('/cart/clear', { method: 'POST' })
                    .then(response => response.text())
                    .then(data => {
                        if (data === 'success') {
                            location.reload();
                        }
                    })
                    .catch(error => console.error('Error:', error));
            }
        });
    }
    
    function updateCartItem(itemId, quantity) {
        fetch('/cart/update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `itemId=${itemId}&quantity=${quantity}`
        })
        .then(response => response.text())
        .then(data => {
            if (data === 'success') {
                location.reload();
            }
        })
        .catch(error => console.error('Error:', error));
    }
    
    function removeFromCart(itemId) {
        fetch('/cart/remove', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `itemId=${itemId}`
        })
        .then(response => response.text())
        .then(data => {
            if (data === 'success') {
                location.reload();
            }
        })
        .catch(error => console.error('Error:', error));
    }
});