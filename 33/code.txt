import java.io.IOException;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

public class JpaDynamicQueryGenerator {

    private static final String BASE_PACKAGE = "com.example.entity";
    private static final String OUTPUT_DIR = "src/main/java/com/example/entity";

    public static void main(String[] args) throws IOException {
        String input = """
            实体: com.example.entity.Order
            字段:
            - id Long
            - customerName String 模糊
            - status Integer 精确
            - amount BigDecimal 范围
            - createTime LocalDateTime 时间范围
            """;

        generateCode(input);
    }

    public static void generateCode(String input) throws IOException {
        // 解析输入
        String[] lines = input.split("\n");
        String entityFullName = lines[0].replace("实体:", "").trim();
        String packageName = entityFullName.substring(0, entityFullName.lastIndexOf('.'));
        String className = entityFullName.substring(entityFullName.lastIndexOf('.') + 1);

        List<FieldInfo> fields = new ArrayList<>();
        for (int i = 2; i < lines.length; i++) {
            String line = lines[i].trim();
            if (line.isEmpty()) continue;

            String[] parts = line.split(" ");
            String name = parts[1];
            String type = parts[2];
            String queryType = parts.length > 3 ? parts[3] : null;

            fields.add(new FieldInfo(name, type, queryType));
        }

        // 创建输出目录
        Path outputPath = Paths.get(OUTPUT_DIR);
        if (!Files.exists(outputPath)) {
            Files.createDirectories(outputPath);
        }

        // 生成实体类
        generateEntityClass(packageName, className, fields, outputPath);

        // 生成Repository
        generateRepository(packageName, className, outputPath);

        // 生成查询条件和Service
        generateCriteriaAndService(packageName, className, fields, outputPath);

        System.out.println("代码生成完成！");
    }

    private static void generateEntityClass(String packageName, String className, 
                                          List<FieldInfo> fields, Path outputPath) throws IOException {
        StringBuilder sb = new StringBuilder();
        sb.append("package ").append(packageName).append(";\n\n");
        sb.append("import jakarta.persistence.*;\n");
        sb.append("import lombok.Data;\n");
        sb.append("import org.springframework.format.annotation.DateTimeFormat;\n");
        sb.append("import java.math.BigDecimal;\n");
        sb.append("import java.time.LocalDateTime;\n\n");

        sb.append("@Data\n");
        sb.append("@Entity\n");
        sb.append("@Table(name = \"").append(toSnakeCase(className)).append("\")\n");
        sb.append("public class ").append(className).append(" {\n\n");

        for (FieldInfo field : fields) {
            sb.append("    @Column(name = \"").append(toSnakeCase(field.name)).append("\")\n");
            
            if ("LocalDateTime".equals(field.type) && "时间范围".equals(field.queryType)) {
                sb.append("    @DateTimeFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\n");
            }
            
            sb.append("    private ").append(field.type).append(" ").append(field.name).append(";\n\n");
        }

        sb.append("    @Id\n");
        sb.append("    @GeneratedValue(strategy = GenerationType.IDENTITY)\n");
        sb.append("    private Long id;\n");
        sb.append("}\n");

        Path filePath = outputPath.resolve(className + ".java");
        Files.writeString(filePath, sb.toString());
    }

    private static void generateRepository(String packageName, String className, 
                                         Path outputPath) throws IOException {
        StringBuilder sb = new StringBuilder();
        sb.append("package ").append(packageName).append(";\n\n");
        sb.append("import org.springframework.data.jpa.repository.JpaRepository;\n");
        sb.append("import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n");
        sb.append("import org.springframework.stereotype.Repository;\n\n");

        sb.append("@Repository\n");
        sb.append("public interface ").append(className).append("Repository extends ");
        sb.append("JpaRepository<").append(className).append(", Long>, ");
        sb.append("JpaSpecificationExecutor<").append(className).append("> {\n");
        sb.append("}\n");

        Path filePath = outputPath.resolve(className + "Repository.java");
        Files.writeString(filePath, sb.toString());
    }

    private static void generateCriteriaAndService(String packageName, String className, 
                                                  List<FieldInfo> fields, Path outputPath) throws IOException {
        // 生成Criteria DTO
        StringBuilder criteriaSb = new StringBuilder();
        criteriaSb.append("package ").append(packageName).append(";\n\n");
        criteriaSb.append("import lombok.Data;\n");
        criteriaSb.append("import org.springframework.format.annotation.DateTimeFormat;\n");
        criteriaSb.append("import java.math.BigDecimal;\n");
        criteriaSb.append("import java.time.LocalDateTime;\n\n");

        criteriaSb.append("@Data\n");
        criteriaSb.append("public class ").append(className).append("Criteria {\n\n");

        for (FieldInfo field : fields) {
            if ("模糊".equals(field.queryType)) {
                criteriaSb.append("    private String ").append(field.name).append(";\n\n");
            } else if ("精确".equals(field.queryType)) {
                criteriaSb.append("    private ").append(field.type).append(" ").append(field.name).append(";\n\n");
            } else if ("范围".equals(field.queryType)) {
                criteriaSb.append("    private ").append(field.type).append(" min").append(capitalize(field.name)).append(";\n");
                criteriaSb.append("    private ").append(field.type).append(" max").append(capitalize(field.name)).append(";\n\n");
            } else if ("时间范围".equals(field.queryType)) {
                criteriaSb.append("    @DateTimeFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\n");
                criteriaSb.append("    private LocalDateTime start").append(capitalize(field.name)).append(";\n");
                criteriaSb.append("    @DateTimeFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\n");
                criteriaSb.append("    private LocalDateTime end").append(capitalize(field.name)).append(";\n\n");
            }
        }

        criteriaSb.append("}\n");

        Path criteriaPath = outputPath.resolve(className + "Criteria.java");
        Files.writeString(criteriaPath, criteriaSb.toString());

        // 生成Service
        StringBuilder serviceSb = new StringBuilder();
        serviceSb.append("package ").append(packageName).append(";\n\n");
        serviceSb.append("import org.springframework.data.domain.Page;\n");
        serviceSb.append("import org.springframework.data.domain.Pageable;\n");
        serviceSb.append("import org.springframework.data.jpa.domain.Specification;\n");
        serviceSb.append("import org.springframework.stereotype.Service;\n");
        serviceSb.append("import jakarta.persistence.criteria.*;\n");
        serviceSb.append("import java.time.LocalDateTime;\n");
        serviceSb.append("import java.time.LocalDate;\n");
        serviceSb.append("import java.time.temporal.TemporalAdjusters;\n\n");

        serviceSb.append("@Service\n");
        serviceSb.append("public class ").append(className).append("QueryService {\n\n");

        serviceSb.append("    private final ").append(className).append("Repository repository;\n\n");

        serviceSb.append("    public ").append(className).append("QueryService(").append(className).append("Repository repository) {\n");
        serviceSb.append("        this.repository = repository;\n");
        serviceSb.append("    }\n\n");

        serviceSb.append("    public Page<").append(className).append("> search(").append(className).append("Criteria criteria, Pageable pageable) {\n");
        serviceSb.append("        return repository.findAll((Specification<").append(className).append(">) (root, query, cb) -> {\n");
        serviceSb.append("            List<Predicate> predicates = new ArrayList<>();\n\n");

        for (FieldInfo field : fields) {
            String fieldName = field.name;
            String capitalized = capitalize(fieldName);
            
            if ("模糊".equals(field.queryType)) {
                serviceSb.append("            if (criteria.get").append(capitalized).append("() != null && !criteria.get").append(capitalized).append("().isEmpty()) {\n");
                serviceSb.append("                predicates.add(cb.like(root.get(\"").append(fieldName).append("\"), \"%\" + criteria.get").append(capitalized).append("() + \"%\"));\n");
                serviceSb.append("            }\n\n");
            } else if ("精确".equals(field.queryType)) {
                serviceSb.append("            if (criteria.get").append(capitalized).append("() != null) {\n");
                serviceSb.append("                predicates.add(cb.equal(root.get(\"").append(fieldName).append("\"), criteria.get").append(capitalized).append("()));\n");
                serviceSb.append("            }\n\n");
            } else if ("范围".equals(field.queryType)) {
                serviceSb.append("            if (criteria.getMin").append(capitalized).append("() != null) {\n");
                serviceSb.append("                predicates.add(cb.ge(root.get(\"").append(fieldName).append("\"), criteria.getMin").append(capitalized).append("()));\n");
                serviceSb.append("            }\n");
                serviceSb.append("            if (criteria.getMax").append(capitalized).append("() != null) {\n");
                serviceSb.append("                predicates.add(cb.le(root.get(\"").append(fieldName).append("\"), criteria.getMax").append(capitalized).append("()));\n");
                serviceSb.append("            }\n\n");
            } else if ("时间范围".equals(field.queryType)) {
                serviceSb.append("            if (criteria.getStart").append(capitalized).append("() != null) {\n");
                serviceSb.append("                predicates.add(cb.greaterThanOrEqualTo(root.get(\"").append(fieldName).append("\"), criteria.getStart").append(capitalized).append("()));\n");
                serviceSb.append("            }\n");
                serviceSb.append("            if (criteria.getEnd").append(capitalized).append("() != null) {\n");
                serviceSb.append("                predicates.add(cb.lessThan(root.get(\"").append(fieldName).append("\"), criteria.getEnd").append(capitalized).append("()));\n");
                serviceSb.append("            }\n\n");
            }
        }

        serviceSb.append("            return cb.and(predicates.toArray(new Predicate[0]));\n");
        serviceSb.append("        }, pageable);\n");
        serviceSb.append("    }\n");
        serviceSb.append("}\n");

        Path servicePath = outputPath.resolve(className + "QueryService.java");
        Files.writeString(servicePath, serviceSb.toString());
    }

    private static String toSnakeCase(String str) {
        return str.replaceAll("([a-z])([A-Z])", "$1_$2").toLowerCase();
    }

    private static String capitalize(String str) {
        if (str == null || str.isEmpty()) {
            return str;
        }
        return str.substring(0, 1).toUpperCase() + str.substring(1);
    }

    static class FieldInfo {
        String name;
        String type;
        String queryType;

        public FieldInfo(String name, String type, String queryType) {
            this.name = name;
            this.type = type;
            this.queryType = queryType;
        }
    }
}

