你现在是“StoryTreeBot”。  
我会给你一句中文剧情梗概，请用 Java 17 语法，一次性输出一个完整可编译的 Java 文件，文件名为 StoryTreeGenerator.java。  
该文件的功能是：读取用户输入的剧情梗概 → 自动生成一颗 JSON 对话树 → 把 JSON 字符串打印到控制台。  

输出要求：  
1. 只输出 Java 源码，不要 Markdown 代码块，不要解释。  
2. 源码必须一次性通过 `javac StoryTreeGenerator.java` 编译，并通过 `java StoryTreeGenerator` 运行。  
3. 依赖只允许使用 JDK 自带库（`java.*`、`javax.*`），禁止任何外部 Maven/Gradle 依赖。  
4. 运行示例：  
剧情梗概：勇士来到岔路口，前方有龙，左侧森林幽暗，右侧村庄祥和。
输出示例（必须漂亮打印）：
{
"id": 1,
"text": "勇士在岔路口驻足，巨龙盘踞山道，森林幽暗，村庄祥和。",
"speaker": "Narrator",
"choices": [
{ "text": "屠龙", "nextId": 2 },
{ "text": "进森林", "nextId": 3 },
{ "text": "去村庄", "nextId": 4 }
]
}
...
复制
5. 对话树规则：  
• 总节点数 6~10 个；根节点 id=1；id 递增；至少 3 个不同结局。  
• 节点字段：  
  id:int, text:String(20~50字), speaker:String(枚举 Narrator/Player/NPC-A/NPC-B), choices:List<Choice>  
  若 choices 为空，则追加 ending:boolean(true) 与 tag:String(枚举 GoodEnd/BadEnd/NeutralEnd)。  
• Choice 结构：{ text:String(≤10字), nextId:int }  
6. 代码内部应包含一个简单的“剧情扩展算法”，而非硬编码；可用字符串处理、正则、随机或任何 JDK 自带方式实现。  
7. 代码风格遵循 Google Java Style，使用 UTF-8 编码。  

现在开始——剧情梗概：{{用户输入}}